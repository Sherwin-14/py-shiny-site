---
title: "Image"
sidebar: components 
preview: |
  <div class="px-4">
  <img width="90" src="/images/shiny.png">
  </div>
listing:
  id: component
  template: ../_partials/components-detail.ejs
  contents:
    - title: Image
      preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACVKAG3jtUoHMBXAJYQAzkwExUxOmSZtiUACYB9bhH5DhAHQj1GTYQAsh2MRKkyAgujxM6lBXDo3hcYcIGkbg7dtXqRTAC8svLKfoIiABQAlD7Q6EqCQUyCWFA8cEo0bIIKkdpMKQIYxHxkqGVKClBkUFl0sHD5YOEaVTSaYNFMAMQAPH3asRDaDjT6jgBujpFCFWQ2peVlzq7upNGIBYVMAAJL870D24W7dhAOdBjVtfWNR4MQO0xjLLwRwu0xiA8nz7ZwMh8OhPc6XDAAERqUAAKlAAEZsJqtETdfqPbRoVDJKyoSJYxICVZ0aZ0aJgAC+AF0gA
      code: |
        from shiny import App, render, ui
        from shiny.types import ImgData
        from pathlib import Path
        here = Path(__file__).parent
    
        app_ui = ui.page_fluid(
            ui.input_checkbox("show", "Show image?", value = True),
            ui.output_image("image") #<<
        )
    
        def server(input, output, session):
            @render.image #<<
            def image():
                img = {"src": here/"shiny.png", "width": "100px"} #<<
                return img if input.show() else None
    
        app = App(app_ui, server)
      relevantfunctions:
        - title: ui.output_image
          href: https://shiny.posit.co/py/api/ui.output_image.html
          signature: ui.output_image(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=False)
        - title: @render.image
          href: https://shiny.posit.co/py/api/render.image.html
          signature: render.image(_fn=None, *, delete_file=False)
      details: |

        To make a reactive image, follow three steps:
          
        1. Call `ui.output_image()` in the UI of your app to create a div in which to display the text. Where you call this function within the UI functions will determine where the text will appear within the layout of the app. Set the id argument of `ui.output_image()` to a unique value.
        
        2. Within the server function, define a new function whose name matches the id used above. Shiny will rerun this function whenever it needs to build or update the output that has the matching id.
        
            The function should return the image to display as a dictionary with the following keys:
              
                1.  `src` - The file path to the image, relative to the app directory. Required.
                2.  `height`- The image height in CSS, e.g. ‘100%’ or ‘600px’. At least one of `height` or `width` must be provided.
                3.  `width` - The image width in CSS,  e.g. ‘100%’ or ‘600px’. At least one of `height` or `width` must be provided.
                4.  `alt` -	Alt text to display for the image. Optional.
                5.  `style`	- A CSS style tag for the image. Optional.

        
        3. Decorate the function with `@render.image`. Use `@render.image(delete_file=True)` to delete the image after it has been rendered.
        
        Set `ui.output_image(inline=True)` to place the image inline with the text or elements that preceed it.
        
        Set `ui.output_image(Fill=True)` to allow the image to grow or shrink to fill its container as the app is resized.
        
        You can use an image as an input widget, collecting the locations of user clicks, double clicks, hovers, and brushes. To do this, follow the instructions provided for [plots](TO DO: ADD LIN KTO THE DETAILS SECTION OF THE PLOTS PAGE).

      variations:
        - title: Null
          description: Null
          preview: Null
          code: Null
---

:::{.component}
:::

