---
title: "Help Text"
sidebar: components 
previewapp: |
  from shiny import App, reactive, ui
  from pathlib import Path
  appdir = Path(__file__).parent
  app_ui = ui.page_fillable(
    ui.include_css(appdir / "styles.css"),
      ui.input_action_button("show", "Show help text"),
      {"class": "vh-100 d-flex justify-content-center align-items-center px-4"}
  )

  def server(input, output, session):

      @reactive.Effect
      @reactive.event(input.show)
      def _():
          ui.notification_show("Well done!", duration = 1)
  
  app = App(app_ui, server)

  ## file: styles.css
  #shiny-notification-panel { max-width: 100%; }
listing:
  - id: component
    template: ../_partials/components-detail.ejs
    contents:
      - title: Help Text
        preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACAZwAsBLCbJjmVYnTJMAgujxM6cKITIcAbnAkBXDgB0IGtKgD6qpgF4mqrFADmcHTQA2qgCYAKDU2McMXVMrI6Zc0joAjLzJSJzB2YgB3NXwmGIBlNiimNjhrVCYKAA8yGIBKPA08jQ07OBpWODpFOgcPLwliL08yCRY4FhYOUjzEEogXAAEpXwU4DABRGho4WWcmYelZMYw4RXI6iBaMCMjigaYyip0HXvmXFxMIYjkaDkIoPwgdXbCAdTTrQ9I4AEIYiR2ZR0R7dAZGACM+y06EMonQDm0eg4bSqNTyYAAvgBdIA
        height: 200px
        code: |
          from shiny import App, reactive, ui

          app_ui = ui.page_fluid(
            ui.input_action_button("show", "Show help text"),
          )

          def server(input, output, session):

            @reactive.Effect
            @reactive.event(input.show)
            def _():
                ui.notification_show("Well done!", duration = 1)

          app = App(app_ui, server)
        relevantfunctions:
          - title: "ui.help_text"
            href: https://shiny.posit.co/py/api/ui.help_text.html
            signature: ui.help_text(*args, **kwargs)
---

:::{#component}
:::

## Details

[`ui.help_text()`](https://shiny.posit.co/py/api/ui.help_text.html) creates stylized help text which can be added to the user interface to provide additional explanation or context.

To create help text, call `ui.help_text()` at a desired location from within your `app_ui`. Then pass `ui.help_text()` one or more help text strings (or other inline HTML elements) to place into the `app_ui`.

See Also: [Tooltips](tooltips.qmd) provide a similar, but alternative way to display information to the user.