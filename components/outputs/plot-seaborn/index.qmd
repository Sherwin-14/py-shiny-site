---
title: Plot (Seaborn)
sidebar: components
preview: '<div class="px-3">

  <img style="width: 100%;height:auto;max-height:130px;" src="/images/seaborn.jpg">

  </div>

  '
listing:
- id: example
  template: ../../_partials/components-detail-example.ejs
  template-params:
    dir: components/outputs/plot-seaborn/
  contents:
  - title: Preview
    file: app-detail-preview.py
    height: 500
  - title: Express
    file: app-express.py
    shinylive: https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXAAjFADugdOgnmAGlQGMB7CAFzkqVQGJkAxASQA0BZAURQCU4B3AE4BLKsigBncRGScAHukFwJUjOgA6EYTHSlBFZBLhQARnpmTDECZoBmg0jGTooAG3iD01AOYBXYdbI2rr6yK6kUAAmAPpeEH4BNhD2joYAFgG4QTp6BgCCmERKEJFwgkT+mppq0f7IALzI-jhQ3nDRtq7+kQAUmsgDTcJYAei+FNESrsKlgn2Q6oTIiwByvjAmZciktsgmiYtEAIzHAAynRABMpwCUBP2DzaTjYxPo4RTz76QUi3cDdAAPIDNDcqiU4LsjIIAG5lHqjcZEZ4UV5EIwqYTkG6IB4DAACxVmOA+fRkgwpbgo9UWeWQAGVjGZBDIMhIKKRvIJYNsZHEEjIzJEsjBJFIAsgubAJFhFnjkDcAcD5aVdt9PjilSDyRSBvz-IFGuEorEfAaJD0wTrdVA5A0rDK2ajSZEoBQoPV9YkiHIaWAhbhoqKVNFvIc9ol6oiKFgIJarbrBrasEYJhRRK44PMAApuDzIbNmg5gBOJ8RyFNwCZyVymOCuebsMXIHreMEl+WUiup6K4WubBuLADCz0of07gyUFF8LPLWvBantBXQPRq-nRZTh5WQpRMvm89QAKoJfHArUswBRcF5aJe4HIKGAAL4AXSAA
  - title: Core
    file: app-core.py
    shinylive: https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXAAjFADugdOgnmAGlQGMB7CAFzkqVQEsZ1SAnC5AZzigCMWJko7DhHYAdCADNmpGMnRQANvGbpqAcwCudEcgZNWyBaSgATAPqqIm7WMnTZ7ABbbcuxizYBBTEWbUTcMxEWuLiGOhmWsgAvMhaOFBqcGYSClomABTiyDlxdFja6BoUZuwKdAHMWZCihMi1AHIaMNyByKQSyNw2tUQAjP0ADINEAEyDAJQE2bnxpMVFJehGFNXLpBS1UzkAxAA8e+IToRABnZzMAG6BGYXFRPMUi0Sc7Ox05BOIMzkAAn6nQI4FZZfi5cGKCjRWqeZAAZS4vGY-Gc7AopDUzFg7X4lms-F4JlcMEEQm0yExsHYWFqP2QE12BzpZzkIK+jMOYPBOTxWh0sSMpgs6j57Ayxy53KgAA8YsJqainiCTFAKFBorybERpdCwITcGYSW8zGpel0bNE7hQsBBxRLubkZVhOCUKHQKAo4NUAAqKZTIb0inpge0OgTS51wErShQ8OAKaoAWVJyAyamOIbpEIjLrMuFjrQTtQAwvNKFss7k-BQNMjwxyTuE5d50BlwpE6C9AtcgsgAtwNGpogAVZgaOASupgCi4VS0adwaUUMAAXwAukA
- id: relevant-functions
  template: ../../_partials/components-detail-relevant-functions.ejs
  template-params:
    dir: components/outputs/plot-seaborn/
  contents:
  - title: ui.output_plot
    href: https://shiny.posit.co/py/api/ui.output_plot.html
    signature: ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False,
      dblclick=False, hover=False, brush=False, fill=MISSING)
  - title: '@render.plot'
    href: https://shiny.posit.co/py/api/render.plot.html
    signature: render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)
---

:::{#example}
:::

:::{#relevant-functions}
:::

## Details

Seaborn is a statistical plotting library that builds on top of Matplotlib.

Follow these steps to display a Seaborn figure in your app:


  1. Add `ui.output_plot()` to the UI of your app to create a div in which to display the figure.
  Where you call this function will determine where the figure will appear within the layout of the app.
  The `id` parameter you provide will be used to link to other parts of the Shiny app.

  2. Define a function within the `server()` function that creates the figure.

      - The name of the function should be the same value you passed into the `id` parameter
        in your `ui.output_plot()` function call in the UI.

      - If your function calls reactive values, Shiny will update your figure whenever those values change, in a [reactive fashion](https://shiny.posit.co/py/docs/reactive-programming.html).

      - Your function should return one of the following objects:</li>

          - A `matplotlib.figure.Figure` instance
          - A `matplotlib.artist.Artist` instance
          - A list/tuple of `Figure`/`Artist` instances
          - An object with a ‘figure’ attribute pointing to a `matplotlib.figure.Figure` instance
          - A `PIL.Image.Image` instance

  3. Decorate your plotting function with a `@render.plot()` decorator.

      - If your plotting function is not the same as the `id` you used in the `ui.output_plot()`, you can add an additional `@output(id=...)` decorator.
      - If you use the `@output()` decorator, make sure it is __above__ the `@render.plot()` decorator.

You can use a plot as an input widget, collecting the locations of user clicks, double clicks, hovers, and brushes. To do this, follow the instructions provided for [plots as inputs](plot-matplotlib.html#plots-as-inputs).

:::{#variations}
:::
