---
title: "Slider Range"
sidebar: components 
previewapp: |
  from shiny import App, render, ui

  app_ui = ui.page_fluid(
      ui.input_slider("range", label="", value=[25, 70], min=1, max=100),
        {"class": "vh-100 d-flex justify-content-center align-items-center px-4"}
  )
  def server(input, output, session):
      @output
      @render.plot
      def hist():
          print(input.range())

  app = App(app_ui, server)
listing:
  id: component
  template: ../_partials/components-detail.ejs
  contents:
    - title: DataTable
      preview: https://shinylive.io/py/app/#h=0&code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACVKAG3jtUoHMBXAJYQAzkwExUxOmSZtiUACYB9bhH5DhAHQj1GTYQAsh2MRKkyAgujxM6lBXDo3hcYcIGkbg7dtXqRTAC8svLKfoIiABQAlD7Q6EqCQUyCWFA8cEo0bIIKkdpMKQIYxHxkqGVKClBkUFl0sHD5YOEaVTSaYNFMAMQAPH3asRDaDjT6jgBujpFCFWQ2peVlzq7upNGIBYVMAAJL870D24W7dhAOdBjVtfWNR4MQO0xjLLwRwu0xiA8nz7ZwMh8OhPc6XDAAERqUAAKlAAEZsJqtETdfqPbRoVDJKyoSJYxICVZ0aZ0aJgAC+AF0gA
      code: |
        from palmerpenguins import load_penguins
        from shiny import App, render, session, ui

        penguins = load_penguins()

        app_ui = ui.page_fluid(
          ui.output_data_frame("penguins_df") #<<
        )

        def server(input, output, session):
            @output #<<
            @render.data_frame #<<
            def penguins_df(): #<<
                return render.DataTable(penguins) #<<

        app = App(app_ui, server)
      relevantfunctions:
        - title: ui.output_data_frame
          href: https://shiny.posit.co/py/api/ui.output_data_frame.html
          signature: ui.output_data_frame(id)
        - title: render.data_frame
          href: https://shiny.posit.co/py/api/render.data_frame.html
          signature: render.data_frame(fn=None)
        - title: render.DataTable
          href: https://shiny.posit.co/py/api/render.DataTable.html
          signature: render.DataTable(self, data, *, width='fit-content', height='500px', summary=True, filters=False, row_selection_mode='none')

---

:::{#component}
:::

## Details

<p>A DataTable presents tabular data in a spread sheet like view. </p>

<p>Follow three steps to display a DataTable in your app:</p>

<ol>
  <li>
  Add `ui.output_data_frame()` to the UI of your app to create a div in which to display the table. Where you call this function will determine where the table will appear within the layout of the app. For example, ...
  </li>
  <li>
  Define a function within the `server` function that builds your table and uses `render.DataTable()` to return the result. Where`render.DataTable()`will package the table as an HTML data table for display. If your function calls reactive values, Shiny will update your table whenever those values change, in a [reactive fashion]().
  
  To notify Shiny that your function returns a reactive table to display, decorate the function with two decorators:
  
   <ul>
     <li>`@output`</li>
     <li>`@render.data_frame()`</li>
   </ul>

  </li>

  <li>Pass `ui.output_data_frame()` the name of the function that builds the DataTable, as a character string, to indicate which DataTable should be displayed in the div. 
  </li>
</ol>