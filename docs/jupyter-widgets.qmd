---
title: "Jupyter Widgets"
format:
  html:
    include-in-header: assets/head-content.html
aliases:
  - ipywidgets.html
---

The [shinywidgets](https://github.com/posit-dev/py-shinywidgets) package enables rendering of [ipywidgets](https://ipywidgets.readthedocs.io/en/latest/) (i.e., Jupyter Widgets) in Shiny.
Many Python packages interface with the ipywidgets framework, including:

- Interactive graphs, like [altair](https://altair-vipiz.github.io/) and [plotly](https://plotly.com/python/).
- Maps, like [pydeck](https://deckgl.readthedocs.io/en/latest/index.html) and [ipyleaflet](https://ipyleaflet.readthedocs.io/en/latest/usage/index.html).
- Tables, [ipydatagrid](https://pypi.org/project/ipydatagrid) and [ipysheet](https://pypi.org/project/ipysheet).
- 3D visualizations, like [ipyvolume](https://pypi.org/project/ipyvolume) and [pythreejs](https://pypi.org/project/pythreejs).
- Media streaming, like [ipywebrtc](https://pypi.org/project/ipywebrtc).

In this article, we'll learn how to leverage ipywidgets in Shiny, including how to [render](#get-started) them, [efficiently update](#efficient-updates) them, and [respond to user input](#user-input).

::: callout-note
### Not all Jupyter Widgets are ipywidgets

Although the term "Jupyter Widgets" is often used to refer to ipywidgets, it's important to note that not all Jupyter Widgets are ipywidgets. For example, packages like [folium](https://python-visualization.github.io/folium/latest/) and [ipyvizzu](https://ipyvizzu.vizzuhq.com/latest/) aren't compatible with ipywidgets, but do provide a [`_repr_html_` method](https://ipython.readthedocs.io/en/stable/config/integrating.html#rich-display) for getting the HTML representation. It may be possible to display these widgets using Shiny's
:::


## Installation

To leverage ipywidgets in Shiny, start by installing `shinywidgets`:

```bash
pip install shinywidgets
```

Then, install the ipywidgets that you'd like to use.
For this article, we'll need the following:

```bash
pip install altair bokeh plotly pydeck ipyleaflet
```

## Get started {#get-started}

Rendering ipywidgets with `shinywidgets` works like most other Shiny [outputs](quick-start.qmd#outputs).
That is, you'll define a (reactive) function that returns a widget, then decorate it with `@render_widget` (or a more specific decorator like `@render_altair`).

::: {.panel-tabset .panel-underline .border-0 .p-0 .justify-content-center}

##### Altair

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 480
from shiny.express import input, ui
from shinywidgets import render_altair

ui.input_selectize(
    "var", "Select variable",
    choices=["bill_length_mm", "body_mass_g"]
)

@render_altair
def hist():
    import altair as alt
    from palmerpenguins import load_penguins
    df = load_penguins()
    return alt.Chart(df).mark_bar().encode(
        x=alt.X(f"{input.var()}:Q", bin=True),
        y="count()"
    )
## file: requirements.txt
altair
anywidget
palmerpenguins
jsonschema
```

:::

## Layout & styling {#layout-styling}

Layout and styling of ipywidgets can get a bit convoluted, partially due to potentially 3 levels of customization:

1. The [ipywidgets API](https://ipywidgets.readthedocs.io/en/7.6.3/examples/Widget%20Styling.html).
2. The widget implementation's API (e.g., `altair`'s `Chart`, `plotly`'s `Figure`, etc).
3. Shiny's UI layer.

Generally speaking, when (2) is available, it's preferrable since it's designed specifically for the widget. For example, if you want to set the size and theme of a plotly figure, can use its `update_layout` method:

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 285

import plotly.express as px
from shiny.express import input, ui
from shinywidgets import render_plotly

ui.input_selectize(
    "theme", "Choose a theme",
    choices=["plotly", "plotly_white", "plotly_dark"]
)

@render_plotly
def plot():
    p = px.histogram(px.data.tips(), x="tip")
    p.update_layout(template=input.theme(), height=200)
    return p
## file: requirements.txt
pandas
plotly
```


### Arranging widgets

When arranging multiple widgets, it's recommended to use Shiny UI components.
In addition to being quite expressive and flexible, these components make it easy to implement filling and responsive layouts.
For example, the following code arranges two widgets side-by-side, and fills the available space:

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 250

import plotly.express as px
from shiny.express import input, ui
from shinywidgets import render_plotly

ui.page_opts(title = "Filling layout", fillable = True)

with ui.layout_columns():
  @render_plotly
  def plot1():
      return px.histogram(px.data.tips(), y="tip")

  @render_plotly
  def plot2():
      return px.histogram(px.data.tips(), y="total_bill")
## file: requirements.txt
pandas
plotly
```

::: callout-tip
#### Layout gallery

For more layout inspiration, check out the [Layout Gallery](/layouts).
:::

## The widget property

In the upcoming sections ([efficiently update](#efficient-updates) & [respond to user input](#user-input)), we'll need access to the rendered widget object.
Turns out, the render function provides this object as a property, named `widget`.
This `widget` property is always a subclass of `ipywidgets.Widget` and may not be the same as the class returned by the render function.
For example, the `hist` function above returns `Figure`, but the `widget` property returns a `FigureWidget` (a subclass of `ipywidgets.Widget`).
In many cases, this is useful since only `ipywidgets.Widget` subclasses support [efficient updating](#efficient-updates) or [responding to user input](#user-input).
If you need the actual return value of the render function, you can access it via the `value` property.

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 480
from shiny.express import render
from shinywidgets import render_plotly

@render_plotly
def hist():
    import plotly.express as px
    return px.histogram(px.data.tips(), x="tip")

@render.code
def info():
    return [type(hist.widget), type(hist.value)]
## file: requirements.txt
pandas
plotly
```



::: callout-tip
## Typing & class coercion

The "main" API for notable packages like `altair`, `bokeh`, `plotly`, and `pydeck` don't subclass `ipywidgets.Widget` (so that they can be used outside of a notebook).
Shinywidgets is aware of this and automatically coerces to the relevant subclass (e.g, plotly's `Figure` -> `FigureWidget`).

As long as you're using the dedicated decorators for these packages (e.g., `@render_altair`), the widget property's type will know about the coercion (i.e., you'll get proper autocomplete and type checking on the `widget` property).
:::


## Efficient updates {#efficient-updates}

If you've used ipywidgets before, you may know that widgets have [properties](https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Basics.html#widget-properties) (aka, traitlets) that can be updated after the widget is created.
And, when performance is paramount, it's often much more performant to update properties (i.e., mutate the widget) instead of re-creating the widget from scratch.

For example, in a notebook, you may have written a code cell like this to first display a map:

```python
import ipyleaflet as ipyl
map = ipyl.Map()
```

Then, in a later cell, you may have updated the map's `center` property to change the map's location:

```python
map.center = (51, 0)
```

With shinywidgets, we can do the same thing _reactively_ in Shiny by updating the `widget` property of the render function.
For example, the following code creates a `map`, then updates the map's center whenever the dropdown changes.

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
from shiny import reactive
from shiny.express import input, ui
from shinywidgets import render_widget
import ipyleaflet as ipyl

city_centers = {
    "London": (51.5074, 0.1278),
    "Paris": (48.8566, 2.3522),
    "New York": (40.7128, -74.0060)
}

ui.input_select("center", "Center", choices=list(city_centers.keys()))

@render_widget
def map():
    return ipyl.Map(zoom=4)

@reactive.effect
def _():
    map.widget.center = city_centers[input.center()]
## file: requirements.txt
ipyleaflet
```

::: callout-note
## Re-render vs efficient update

If the app above had used `@render_widget` instead of `@reactive.effect` to perform the update, then the map would be re-rendered from stratch every time `input.center` changes, which causes the map to flicker (instead of a smooth transition to the new location).
:::

::: callout-tip
## Discovering properties

If you're not sure what properties (aka, traitlets) are available/eligible for updating, you can use the `widget.traits()` method to list them.
:::


## Respond to user input {#user-input}

There are two different ways to respond to user input:

1. [Reactive properties](#reactive-read)
2. [Widget event callbacks](#event-callbacks)

The first approach is usually the best/easiest, but the second approach may be necessary if the event information isn't available as a widget property.

### Reactive properties {#reactive-read}

If you've used ipywidgets before, you may know that widgets have [properties](https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Basics.html#widget-properties) (aka "traitlets") that can be accessed and observed.
For example, in a notebook, you may have written a code cell like this to first display a map:

```python
import ipyleaflet as ipyl
map = ipyl.Map()
```

Then, in a later cell, you may have read the map's `center` property to get the current map's location:

```python
map.center
```

With shinywidgets, we can do the same thing _reactively_ in Shiny by using the `reactive_read()` function to read the property in a reactive context.
For example, the following example creates a `map`, then displays/updates the map's current center whenever the map is panned.

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 460
import ipyleaflet as ipyl
from shiny.express import render
from shinywidgets import reactive_read, render_widget

"Click and drag to pan the map"

@render_widget
def map():
    return ipyl.Map(zoom=2)

@render.text
def center():
    cntr = reactive_read(map.widget, 'center')
    return f"Current center: {cntr}"
## file: requirements.txt
ipyleaflet
```

::: callout-warning
## Observable properties

Only [observable](https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Events.html#traitlet-events) properties (i.e., traits) can be used with `reactive_read()`.
For a list of which properties are observable, use the `widget.traits()` method.

Also, be aware that some more complex widgets have attributes that contain observable properties.
One practical example of this is the `selections` attribute of altair's `JupyterChart` class, which has an [observable `point` property](https://altair-viz.github.io/user_guide/jupyter_chart.html#point-selections).

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 460
import altair as alt
from shiny.express import render
from shinywidgets import reactive_read, render_altair
from vega_datasets import data

"Click the legend to update the selection"

@render.code
def selection():
    pt = reactive_read(jchart.widget.selections, "point")
    return str(pt)

@render_altair
def jchart():
    brush = alt.selection_point(name="point", encodings=["color"], bind="legend")
    return alt.Chart(data.cars()).mark_point().encode(
        x='Horsepower:Q',
        y='Miles_per_Gallon:Q',
        color=alt.condition(brush, 'Origin:N', alt.value('grey')),
    ).add_params(brush)
## file: requirements.txt
altair
anywidget
vega_datasets
```

:::


### Widget event callbacks {#event-callbacks}

Sometimes, you may want to capture user interaction that isn't available through a widget property.
For example, `ipyleaflet.CircleMarker` has an `.on_click()` method that allows you to execute a callback when a marker is clicked. In this case, you'll want to define a callback that updates some `reactive.value` everytime its triggered to capture the relevant information. That way, the callback information can be used to cause invalidation of other outputs (or trigger reactive side-effects):

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 450
import ipyleaflet as ipyl
from shiny.express import render
from shiny import reactive
from shinywidgets import render_widget

# Stores the number of clicks
n_clicks = reactive.value(0)

# A click callback that updates the reactive value
def on_click(**kwargs):
    n_clicks.set(n_clicks() + 1)

# Create the map, add the CircleMarker, and register the map with Shiny
@render_widget
def map():
    cm = ipyl.CircleMarker(location=(55, 360))
    cm.on_click(on_click)
    m = ipyl.Map(center=(53, 354), zoom=5)
    m.add_layer(cm)
    return m

@render.text
def nClicks():
    return f"Number of clicks: {n_clicks.get()}"
## file: requirements.txt
ipyleaflet
```

::: callout-tip
#### Widgets can contain other widgets

In the example above, we created a `CircleMarker` object, then added it to a `Map` object. Both of these objects subclass `ipywidgets.Widget`, so they both have properties (aka, traitlets) that can be updated and read reactively.
:::



## Shinylive

Examples on this page are powered by [shinylive](shinylive.qmd), a tool for running Shiny apps in the browser (via [pyodide](https://pyodide.org/en/stable/)).
Generally speaking, apps that use shinywidgets should work in shinylive as long as the widget and app code is supported by pyodide.
The shinywidgets package itself comes pre-installed in shinylive, but you'll need to include any other dependencies [in the `requirements.txt` file](shinylive.qmd#requiring-extra-packages-with-requirements.txt).


## Examples

For more shinywidgets examples, see the [`examples/` directory](https://github.com/posit-dev/py-shinywidgets/tree/main/examples) in the [shinywidgets repo](https://github.com/posit-dev/py-shinywidgets/). The [outputs](https://github.com/posit-dev/py-shinywidgets/tree/main/examples/outputs) example is a particularly useful example to see an overview of available widgets.


## Troubleshooting

If after [installing](#installation) `shinywidgets`, you have trouble rendering widgets,
first try running this "hello world" ipywidgets [example](https://github.com/rstudio/py-shinywidgets/blob/main/examples/ipywidgets/app.py).
If that doesn't work, it could be that you have an unsupported version of a dependency like `ipywidgets` or `shiny`.

If you can run the "hello world" example, but other widgets don't work, first
check that the extension is properly configured with `jupyter nbextension list`.
If the extension is properly configured, and still isn't working, here are some possible reasons why:

1. The widget requires initialization code to work in a notebook environment.
  * In this case, `shinywidgets` probably won't work without providing the equivalent setup information to Shiny. A known case of this is bokeh, shinywidgets' `@render_bokeh` decorator handles through inclusion of additional HTML [dependencies](https://github.com/posit-dev/py-shinywidgets/blob/9ea804c3/shinywidgets/_render_widget.py#L38-L42).
2. Not all widgets are compatible with ipywidgets!
  * Some web-based widgets in Python aren't compatible with the ipywidgets framework, but do provide a `repr_html` method for getting the HTML representation (e.g., [folium](https://python-visualization.github.io/folium/latest/)). It may be possible to display these widgets using Shiny's [`@render.ui`](../api/render.ui.html) decorator, but be aware that, you may not be able to do things mentioned in this article with these widgets.
3. The widget itself is broken.
  * If you think this is the case, try running the code in a notebook to see if it works there. If it doesn't work in a notebook, then it's likely a problem with the widget itself (and the issue should be reported to the widget's maintainers).
4. The widget is otherwise misconfigured (or your offline).
  * `shinywidgets` tries its best to load widget dependencies from local files, but if it fails to do so, it will try to load them from a CDN. If you're offline, then the CDN won't work, and the widget will fail to load. If you're online, and the widget still fails to load, then please let us know by [opening an issue](https://github.com/posit-dev/py-shinywidgets/issues/new).


## For developers

If you'd like to create your own ipywidget that works with shinywidgets, we highly recommend using the [anywidget](https://anywidget.dev/) framework to develop that ipywidget.
However, if only care about Shiny integration, and not Jupyter, then you may want to consider using a [custom Shiny binding](custom-component-one-off.qmd) instead of shinywidgets.
If you happen to already have an ipywidget implementation, and want to use/add a dedicated decorator for it, see how it's done [here](https://github.com/posit-dev/py-shinywidgets/blob/9ea804c3d/shinywidgets/_render_widget.py#L30-L48).
