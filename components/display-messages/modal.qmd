---
title: "Modal"
sidebar: components

appPreview:
  file: display-messages/modal/app-preview.py

listing:
  - id: example
    template: ../_partials/_new_component-example.ejs
    contents:
      - modal/meta.qmd
  - id: relevant-functions
    template: ../_partials/_new_relevant-functions.ejs
    contents:
      - modal/meta.qmd
  - id: variations
    template: ../_partials/_new_variations.ejs
    contents:
      - modal/meta_variation_auth.qmd
---


:::{#example}
:::

:::{#relevant-functions}
:::

## Details

A modal is a dialog box that appears in front of the app. You can use modals to display messages, curate the user experience, or collect user input, like passwords and usernames.

To create a modal, first assemble the components of the modal with [`ui.modal()`](https://shiny.posit.co/py/api/ui.modal.html) and save them to an object. Then call [`ui.modal_show()`](https://shiny.posit.co/py/api/ui.modal_show.html) on the object to display the modal.

Typically, you will want to create a reactive effect to call `ui.modal_show()` whenever a particular event occurs. For example, the reactive effect below will open a modal whenever the value of `input.show()` changes.

```python
@reactive.Effect
@reactive.event(input.show)
def _():
    m = ui.modal( #<<
        "This is a somewhat important message.",
        title="Somewhat important message",
        easy_close=True
    )
    ui.modal_show(m)
```

## Modal contents

To add elements to a modal, pass them as unnamed arguments to `ui.modal()`. Modals can contain any UI elements recognized by Shiny.

Modals come in four sizes: small (`'s'`), medium (`'m'`) (the default), large (`'l'`), and extra-large (`'xl'`). Set the size of a modal with the `size` argument of `ui.modal()`.

See Also: [Notifications](notifications.qmd) provide a similar, but alternative way to display information to the user.

## Variations

:::{#variations}
:::

